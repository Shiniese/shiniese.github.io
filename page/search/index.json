[{"content":"问题重现 最近在 vs code 中使用 go 语言写代码时右下角总是出现下面的弹窗，每次无论点击 install 还是 install all 都是安装失败。\n安装报错：\n# 安装指令 go install -v golang.org/x/tools/gopls@latest # 报错 ../../../go/pkg/mod/golang.org/x/tools/gopls@v0.16.1/internal/golang/comment.go:12:2: package go/doc/comment is not in GOROOT (/usr/lib/go-1.18/src/go/doc/comment) 报错后其实没有影响我的正常使用，因此没管它。直到有一次在我的另一台电脑上问题重现，并且一点击 install 就成功安装后才发现这是个好东西。它能够实现诸如自动完成, 代码提示等功能。因此今日决定 fix 这个遗留问题。\n尝试过的方法 根据报错 package go/doc/comment is not in GOROOT，怀疑是 GOROOT 没有正确配置 export GOROOT=/usr/lib/go 清理模块缓存并重新下载：\ngo clean -modcache go install -v golang.org/x/tools/gopls@latest 仍然无法解决问题。\n手动安装 go/doc/comment 包 go get -u golang.org/x/tools/godoc go install -v golang.org/x/tools/gopls@latest 仍然无法解决。\n查询网上资料，可能是网络问题，但本地早已正确配置相关代理，排除。\n最终解决方案 在 stackoverflow1 上看到有人用 brew install gopls 解决了。我用的是 Ubuntu，尝试搜索该包并安装。\n# 还真有 gopls 包 sudo apt search gopls sudo apt install gopls 搞定！比网上改配置、改环境、手动下载的方法简单多了，一行代码搞定。能用系统自带包解决还要啥自行车？\n课外知识2 - Language Server Protocol Go 扩展默认是使用大量的 Go 工具来提供各种功能的, 每个工具提供某个方面的能力, 比如代码提示是依靠 gocode 的.\n不过微软在开发 VS Code 过程中, 定义一种协议, 语言服务器协议, Language Server Protocol.\n这可是个好东西, 如果你需要开发编辑器或 IDE, 就不需要再为每种语言实现诸如自动完成, 代码提示等功能了, 直接利用 语言服务器协议 就行了.\n而 gopls 就是官方的语言服务器.\nHow to solve vs code - gopls command is not available\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n在 VS Code 中使用 gopls\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-07-09T09:40:09+08:00","image":"https://files.catbox.moe/v0qv5j.png","permalink":"https://shiniese.github.io/post/how-to-solve-vs-code-gopls-command-is-not-available/","title":"VS Code 中  gopls 的安装问题及解决方案 - Ubuntu"},{"content":"\r视频 By 码农高天\n笔记 情景 1：向远程仓库 push 更新（本地从未拉取过仓库） 克隆远程仓库到本地: git clone \u0026lt;repository_url\u0026gt; 创建并切换到新的功能分支: git checkout -b my_feature 修改代码后,查看更改: git diff 添加修改的文件到暂存区: git add \u0026lt;file_name\u0026gt; 提交更改: git commit -m \u0026#34;注释\u0026#34; 将功能分支推送到远程仓库: git push origin my_feature 情景 2：向远程仓库 push 更新（已拉取过仓库，但写代码时发现远端 GitHub 上代码出现改变） 当主分支(main)有更新时,同步这些更新到功能分支: git checkout main git pull origin main git checkout my_feature git rebase main git rebase main 意思是先把 main 移过来，然后根据我的 commit 来修改成新的内容。中途可能会出现 rebase conflict，这时需要手动选择保留哪段代码。\n强制推送更新后的功能分支到远程仓库: git push -f origin my_feature 需要注意的是,在使用 git push -f (强制推送)时要格外小心,因为它会覆盖远程分支的历史。只有在确定没有其他人在同一分支上工作或者大家都是用这样同一套工作流时才应使用此命令。\n在GitHub上创建Pull Request 情景 3：远程仓库完成更新后 合并 Pull Request 后，清理分支:\ngit checkout main git pull origin main git branch -d my_feature ","date":"2024-07-06T10:57:13+08:00","image":"https://files.catbox.moe/n39b5x.png","permalink":"https://shiniese.github.io/post/study-github-workflow/","title":"学习 Github 工作流"},{"content":"写什么？ 主要写一些日常和一些技术文章，用来记录或存档。\n为什么？ 其实我蛮懒的，很早就弄过博客，只是没过多久就没动力更新了，所以最后都废了。要么没时间要么就是想干些别的。\n那为啥又突然心血来潮了？\n主要是前些天看到说 AI 时代，网上很多信息都将被污染，我希望个人博客是优质信息的最后一片净⼟，所以重新操办起来了。\n能否坚持？ 再说吧\u0026hellip;\n","date":"2024-07-05T18:31:39+08:00","permalink":"https://shiniese.github.io/post/my-first-post/","title":"My First Post"}]