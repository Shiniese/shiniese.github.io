[{"content":"偶然发现 昨天把刚到的 DHT11 温湿度传感器 在 esp8266 上试了一下，发现在库函数除了计算温度和温度外还有一个叫 Heat Index 的东西，看见它和温度单位一样但数值不一样，那么它和温度肯定是有一些差别的，于是查资料学习。\n酷热指数（Heat Index） 酷热指数（英语：Heat Index） 是一种综合空气温度和相对湿度的热指标。人体通过排出汗液来达到降温的目的，在这个过程里汗液中的水分得以蒸发并且从人体带走热量。但是当相对湿度较高时，水分的蒸发率就会降低。这意味着从身体中带走热量的过程变得缓慢，相对处于干燥空气中的情况，人体内会自动排汗并带走身上的热量。基于在已知温度和湿度时的主观描述定义的计量方法，得出的指数可以将一组温度和湿度的组合换算成干燥空气中的一个相对更高的温度值。1\n简单来说，酷热指数是一个指数，它结合了空气温度和相对湿度，在阴凉的地方，以人类感知的等效温度来表示热度。酷热指数是描述在阴凉处体验的温度，但它不考虑来自直射阳光、体力活动或风的加热和冷却。相对湿度高会减少蒸发和冷却，增加不适感和潜在的热应激。酷热指数的计算公式基于温度和湿度，并不考虑其他因素，如风和阳光。2因此这也是它的一个局限性，毕竟一个人受到太阳暴晒和在阴凉处乘凉的体感温度还是不一样的。\n下表来自美国国家海洋和大气管理局。色谱柱的起始温度为 80 °F (27 °C)，但在 79 °F (26 °C) 以及高湿度时的类似温度下也存在热指数效应。\n温度热指数（°C），带阴影的警告/危险范围：\n我的思考 那既然湿度低会更凉快些，那夏天开除湿模式会不会比正常制冷模式会更好些？\n经过一番查找资料，总结了一下大概有以下几点：\n当室外温度在20℃到30℃之间时，使用除湿模式通常比制冷模式更省电。 如果室外温度超过30℃，尤其是达到35℃以上，除湿模式的降温效果会明显变差，耗电量也会增加。 在梅雨季节或空气湿度较高的南方地区，由于空气中的水汽较多，使用除湿模式可以有效降低室内湿度，从而带来更好的舒适感。 我就处在南方地区，确实湿度对于我们来说是一很大的问题。特别是被子如果不隔一段时间去晒一下就会摸起来感觉黏黏的，睡起来很不舒服。\n那么有没有在夏季实现最高效的空调使用方法？我想到了一个组合方法：\n因为房间一开始很热，所以想先使用制冷模式快速降低温度。 一旦温度舒适，再切换到除湿模式来降低房间温度，一个是保持舒适度二个是不会特别冷。 经过实验，这个方法确实十分有效，在我的体感方面测试成功。我试了一直开除湿、一直开制冷和上面的组合方法。第一种温度降不下去，第二种温度降得快但是很费电（感觉上，毕竟身边没有设备测试），而最后的组合方法确实达到了我想要的效果，温度下降快，并且开启除湿后身体舒适度会好很多。另外其实我还漏说了一个，其实第一步可以搭配风扇实现快速降温，我之前也一直是这样做的。具体原理好像是因为空气的流通速度增加会增强导热性？（之前上《流体力学》好像有讲，没认真听课。这里的“热”指的是热度，我们所说的“冷”也是有热度的！）\n实验完毕，又水了一篇小文章，为自己鼓掌，再接再厉。\n酷热指数 - 维基百科，自由的百科全书\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nHeat index - Wikipedia\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-07-12T16:08:05+08:00","image":"https://files.catbox.moe/9infqu.jpg","permalink":"https://shiniese.github.io/post/heat-index-and-some-of-my-thoughts/","title":"酷热指数（Heat Index）以及我的一些思考"},{"content":"问题重现 最近在 vs code 中使用 go 语言写代码时右下角总是出现下面的弹窗，每次无论点击 install 还是 install all 都是安装失败。\n安装报错：\n# 安装指令 go install -v golang.org/x/tools/gopls@latest # 报错 ../../../go/pkg/mod/golang.org/x/tools/gopls@v0.16.1/internal/golang/comment.go:12:2: package go/doc/comment is not in GOROOT (/usr/lib/go-1.18/src/go/doc/comment) 报错后其实没有影响我的正常使用，因此没管它。直到有一次在我的另一台电脑上问题重现，并且一点击 install 就成功安装后才发现这是个好东西。它能够实现诸如自动完成, 代码提示等功能。因此今日决定 fix 这个遗留问题。\n尝试过的方法 根据报错 package go/doc/comment is not in GOROOT，怀疑是 GOROOT 没有正确配置 export GOROOT=/usr/lib/go 清理模块缓存并重新下载：\ngo clean -modcache go install -v golang.org/x/tools/gopls@latest 仍然无法解决问题。\n手动安装 go/doc/comment 包 go get -u golang.org/x/tools/godoc go install -v golang.org/x/tools/gopls@latest 仍然无法解决。\n查询网上资料，可能是网络问题，但本地早已正确配置相关代理，排除。\n最终解决方案 在 stackoverflow1 上看到有人用 brew install gopls 解决了。我用的是 Ubuntu，尝试搜索该包并安装。\n# 还真有 gopls 包 sudo apt search gopls sudo apt install gopls 搞定！比网上改配置、改环境、手动下载的方法简单多了，一行代码搞定。能用系统自带包解决还要啥自行车？\n课外知识2 - Language Server Protocol Go 扩展默认是使用大量的 Go 工具来提供各种功能的, 每个工具提供某个方面的能力, 比如代码提示是依靠 gocode 的.\n不过微软在开发 VS Code 过程中, 定义一种协议, 语言服务器协议, Language Server Protocol.\n这可是个好东西, 如果你需要开发编辑器或 IDE, 就不需要再为每种语言实现诸如自动完成, 代码提示等功能了, 直接利用 语言服务器协议 就行了.\n而 gopls 就是官方的语言服务器.\nHow to solve vs code - gopls command is not available\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n在 VS Code 中使用 gopls\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-07-09T09:40:09+08:00","image":"https://files.catbox.moe/v0qv5j.png","permalink":"https://shiniese.github.io/post/how-to-solve-vs-code-gopls-command-is-not-available/","title":"VS Code 中  gopls 的安装问题及解决方案 - Ubuntu"},{"content":"\r视频 By 码农高天\n笔记 情景 1：向远程仓库 push 更新（本地从未拉取过仓库） 克隆远程仓库到本地: git clone \u0026lt;repository_url\u0026gt; 创建并切换到新的功能分支: git checkout -b my_feature 修改代码后,查看更改: git diff 添加修改的文件到暂存区: git add \u0026lt;file_name\u0026gt; 提交更改: git commit -m \u0026#34;注释\u0026#34; 将功能分支推送到远程仓库: git push origin my_feature 情景 2：向远程仓库 push 更新（已拉取过仓库，但写代码时发现远端 GitHub 上代码出现改变） 当主分支(main)有更新时,同步这些更新到功能分支: git checkout main git pull origin main git checkout my_feature git rebase main git rebase main 意思是先把 main 移过来，然后根据我的 commit 来修改成新的内容。中途可能会出现 rebase conflict，这时需要手动选择保留哪段代码。\n强制推送更新后的功能分支到远程仓库: git push -f origin my_feature 需要注意的是,在使用 git push -f (强制推送)时要格外小心,因为它会覆盖远程分支的历史。只有在确定没有其他人在同一分支上工作或者大家都是用这样同一套工作流时才应使用此命令。\n在GitHub上创建Pull Request 情景 3：远程仓库完成更新后 合并 Pull Request 后，清理分支:\ngit checkout main git pull origin main git branch -d my_feature ","date":"2024-07-06T10:57:13+08:00","image":"https://files.catbox.moe/n39b5x.png","permalink":"https://shiniese.github.io/post/study-github-workflow/","title":"学习 Github 工作流"},{"content":"写什么？ 主要写一些日常和一些技术文章，用来记录或存档。\n为什么？ 其实我蛮懒的，很早就弄过博客，只是没过多久就没动力更新了，所以最后都废了。要么没时间要么就是想干些别的。\n那为啥又突然心血来潮了？\n主要是前些天看到说 AI 时代，网上很多信息都将被污染，我希望个人博客是优质信息的最后一片净⼟，所以重新操办起来了。\n能否坚持？ 再说吧\u0026hellip;\n","date":"2024-07-05T18:31:39+08:00","permalink":"https://shiniese.github.io/post/my-first-post/","title":"My First Post"}]